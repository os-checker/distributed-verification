[2m2025-04-12T06:40:23.925221Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 1, name: "verify::contract1::kani_register_contract" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.925643Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 3, name: "verify::contract1::{closure#0}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.925957Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 5, name: "verify::contract1::{closure#0}::{closure#0}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.926205Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 6, name: "verify::contract1::{closure#0}::{closure#1}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.926453Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 7, name: "verify::contract1::{closure#0}::{closure#1}::{closure#0}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.926700Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 8, name: "verify::contract1::{closure#1}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.926948Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 9, name: "verify::contract1::{closure#2}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.927340Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 10, name: "verify::contract1::{closure#2}::{closure#0}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.927589Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 11, name: "verify::contract1::{closure#3}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[2m2025-04-12T06:40:23.927836Z[0m [31mERROR[0m [1mall_local_items[0m[1m{[0m[3mitem[0m[2m=[0mCrateItem(DefId { id: 12, name: "verify::contract1::{closure#3}::{closure#0}" })[1m}[0m[2m:[0m [2mdistributed_verification::functions[0m[2m:[0m [3merr[0m[2m=[0mError("Item requires monomorphization")
[
  {
    "def_id": "DefId { id: 13, name: \"verify::standard_proof_with_contract_requires\" }",
    "file": "tests/standard_proofs_with_contracts.rs",
    "attrs": [
      "#[kanitool::proof]"
    ],
    "func": "fn standard_proof_with_contract_requires() {\n        contract1(0);\n    }",
    "callees": [
      "DefId { id: 0, name: \"verify::contract1\" }",
      "DefId { id: 1, name: \"verify::contract1::kani_register_contract\" }",
      "DefId { id: 14, name: \"kani::panic\" }",
      "DefId { id: 16, name: \"kani::panic::panic_cold_display\" }",
      "DefId { id: 17, name: \"std::rt::panic_display\" }",
      "DefId { id: 18, name: \"core::fmt::rt::Argument::<'_>::new_display\" }",
      "DefId { id: 30, name: \"<&T as std::fmt::Display>::fmt\" }",
      "DefId { id: 37, name: \"<str as std::fmt::Display>::fmt\" }",
      "DefId { id: 39, name: \"std::fmt::Formatter::<'a>::pad\" }",
      "DefId { id: 61, name: \"<std::result::Result<T, F> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, E>>>::from_residual\" }",
      "DefId { id: 89, name: \"<T as std::convert::From<T>>::from\" }",
      "DefId { id: 45, name: \"core::str::<impl str>::char_indices\" }",
      "DefId { id: 53, name: \"core::str::<impl str>::chars\" }",
      "DefId { id: 177, name: \"core::slice::<impl [T]>::iter\" }",
      "DefId { id: 178, name: \"std::slice::Iter::<'a, T>::new\" }",
      "DefId { id: 34, name: \"std::ptr::NonNull::<T>::cast\" }",
      "DefId { id: 36, name: \"std::ptr::NonNull::<T>::as_ptr\" }",
      "DefId { id: 36, name: \"std::ptr::NonNull::<T>::as_ptr\" }",
      "DefId { id: 181, name: \"std::ptr::mut_ptr::<impl *mut T>::add\" }",
      "DefId { id: 179, name: \"<std::ptr::NonNull<T> as std::convert::From<&T>>::from\" }",
      "DefId { id: 33, name: \"std::ptr::NonNull::<T>::from_ref\" }",
      "DefId { id: 180, name: \"std::ptr::without_provenance\" }",
      "DefId { id: 135, name: \"std::ptr::without_provenance_mut\" }",
      "DefId { id: 163, name: \"core::str::<impl str>::as_bytes\" }",
      "DefId { id: 52, name: \"core::str::<impl str>::get_unchecked\" }",
      "DefId { id: 226, name: \"core::str::traits::<impl std::slice::SliceIndex<str> for std::ops::RangeTo<usize>>::get_unchecked\" }",
      "DefId { id: 227, name: \"core::str::traits::<impl std::slice::SliceIndex<str> for std::ops::Range<usize>>::get_unchecked\" }",
      "DefId { id: 230, name: \"std::ptr::const_ptr::<impl *const [T]>::as_ptr\" }",
      "DefId { id: 151, name: \"std::ptr::slice_from_raw_parts\" }",
      "DefId { id: 161, name: \"std::ptr::from_raw_parts\" }",
      "DefId { id: 229, name: \"core::str::traits::<impl std::slice::SliceIndex<str> for std::ops::Range<usize>>::get_unchecked::precondition_check\" }",
      "DefId { id: 83, name: \"core::panicking::panic_nounwind\" }",
      "DefId { id: 84, name: \"std::fmt::Arguments::<'a>::new_const\" }",
      "DefId { id: 85, name: \"core::panicking::panic_nounwind_fmt\" }",
      "DefId { id: 86, name: \"core::panicking::panic_nounwind_fmt::runtime\" }",
      "DefId { id: 23, name: \"std::panic::Location::<'a>::caller\" }",
      "DefId { id: 24, name: \"core::panic::panic_info::PanicInfo::<'a>::new\" }",
      "DefId { id: 188, name: \"std::ptr::const_ptr::<impl *const T>::add\" }",
      "DefId { id: 228, name: \"std::ptr::const_ptr::<impl *const [T]>::len\" }",
      "DefId { id: 231, name: \"std::ptr::metadata\" }",
      "DefId { id: 50, name: \"std::num::NonZero::<T>::get\" }",
      "DefId { id: 56, name: \"std::fmt::Formatter::<'a>::padding\" }",
      "DefId { id: 58, name: \"<std::result::Result<T, E> as std::ops::Try>::branch\" }",
      "DefId { id: 223, name: \"std::fmt::FormattingOptions::get_fill\" }",
      "DefId { id: 120, name: \"std::char::methods::<impl char>::from_u32_unchecked\" }",
      "DefId { id: 121, name: \"std::char::convert::from_u32_unchecked\" }",
      "DefId { id: 80, name: \"core::ub_checks::check_language_ub\" }",
      "DefId { id: 88, name: \"core::ub_checks::check_language_ub::runtime\" }",
      "DefId { id: 122, name: \"std::char::convert::from_u32_unchecked::precondition_check\" }",
      "DefId { id: 123, name: \"std::char::convert::char_try_from_u32\" }",
      "DefId { id: 125, name: \"core::num::<impl u32>::wrapping_sub\" }",
      "DefId { id: 124, name: \"std::result::Result::<T, E>::is_ok\" }",
      "DefId { id: 222, name: \"std::option::Option::<T>::unwrap_or\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 70, name: \"std::iter::range::<impl std::iter::Iterator for std::ops::Range<A>>::next\" }",
      "DefId { id: 74, name: \"<std::ops::Range<T> as std::iter::range::RangeIteratorImpl>::spec_next\" }",
      "DefId { id: 78, name: \"<u16 as std::iter::Step>::forward_unchecked\" }",
      "DefId { id: 79, name: \"core::num::<impl u16>::unchecked_add\" }",
      "DefId { id: 81, name: \"core::num::<impl u16>::unchecked_add::precondition_check\" }",
      "DefId { id: 82, name: \"core::num::<impl u16>::overflowing_add\" }",
      "DefId { id: 76, name: \"std::cmp::impls::<impl std::cmp::PartialOrd for u16>::lt\" }",
      "DefId { id: 68, name: \"<I as std::iter::IntoIterator>::into_iter\" }",
      "DefId { id: 221, name: \"std::fmt::FormattingOptions::get_align\" }",
      "DefId { id: 224, name: \"core::fmt::PostPadding::new\" }",
      "DefId { id: 61, name: \"<std::result::Result<T, F> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, E>>>::from_residual\" }",
      "DefId { id: 47, name: \"std::convert::num::<impl std::convert::From<u16> for usize>::from\" }",
      "DefId { id: 51, name: \"std::str::CharIndices::<'a>::offset\" }",
      "DefId { id: 44, name: \"std::fmt::FormattingOptions::get_precision\" }",
      "DefId { id: 58, name: \"<std::result::Result<T, E> as std::ops::Try>::branch\" }",
      "DefId { id: 55, name: \"<std::str::Chars<'a> as std::iter::Iterator>::count\" }",
      "DefId { id: 144, name: \"core::str::count::count_chars\" }",
      "DefId { id: 164, name: \"core::str::count::char_count_general_case\" }",
      "DefId { id: 201, name: \"<std::iter::Filter<I, P> as std::iter::Iterator>::count\" }",
      "DefId { id: 207, name: \"std::iter::Iterator::sum\" }",
      "DefId { id: 212, name: \"<usize as std::iter::Sum>::sum\" }",
      "DefId { id: 214, name: \"<std::iter::Map<I, F> as std::iter::Iterator>::fold\" }",
      "DefId { id: 215, name: \"std::iter::adapters::map::map_fold\" }",
      "DefId { id: 216, name: \"<std::slice::Iter<'a, T> as std::iter::Iterator>::fold\" }",
      "DefId { id: 96, name: \"core::num::<impl usize>::unchecked_add\" }",
      "DefId { id: 97, name: \"core::num::<impl usize>::unchecked_add::precondition_check\" }",
      "DefId { id: 98, name: \"core::num::<impl usize>::overflowing_add\" }",
      "DefId { id: 106, name: \"std::ptr::NonNull::<T>::offset_from_unsigned\" }",
      "DefId { id: 107, name: \"std::ptr::mut_ptr::<impl *mut T>::offset_from_unsigned\" }",
      "DefId { id: 108, name: \"std::ptr::const_ptr::<impl *const T>::offset_from_unsigned\" }",
      "DefId { id: 109, name: \"std::ptr::const_ptr::<impl *const T>::offset_from_unsigned::precondition_check\" }",
      "DefId { id: 113, name: \"std::ptr::const_ptr::<impl *const T>::offset_from_unsigned::runtime_ptr_ge\" }",
      "DefId { id: 114, name: \"std::ptr::const_ptr::<impl *const T>::offset_from_unsigned::runtime_ptr_ge::runtime\" }",
      "DefId { id: 110, name: \"std::mem::size_of\" }",
      "DefId { id: 112, name: \"core::panicking::panic\" }",
      "DefId { id: 20, name: \"std::rt::panic_fmt\" }",
      "DefId { id: 105, name: \"std::ptr::const_ptr::<impl *const T>::addr\" }",
      "DefId { id: 115, name: \"std::ptr::const_ptr::<impl *const T>::cast\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 138, name: \"std::ptr::NonNull::<T>::add\" }",
      "DefId { id: 218, name: \"std::iter::adapters::map::map_fold::{closure#0}\" }",
      "DefId { id: 209, name: \"<std::iter::Filter<I, P> as std::iter::Iterator>::count::to_usize::{closure#0}\" }",
      "DefId { id: 204, name: \"core::str::count::char_count_general_case::{closure#0}\" }",
      "DefId { id: 220, name: \"core::str::validations::utf8_is_cont_byte\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 217, name: \"<usize as std::iter::Sum>::sum::{closure#0}\" }",
      "DefId { id: 137, name: \"<std::ptr::NonNull<T> as std::cmp::PartialEq>::eq\" }",
      "DefId { id: 205, name: \"<std::iter::Filter<I, P> as std::iter::Iterator>::count::to_usize\" }",
      "DefId { id: 206, name: \"std::iter::Iterator::map\" }",
      "DefId { id: 210, name: \"std::iter::Map::<I, F>::new\" }",
      "DefId { id: 200, name: \"std::iter::Iterator::filter\" }",
      "DefId { id: 203, name: \"std::iter::Filter::<I, P>::new\" }",
      "DefId { id: 165, name: \"core::str::count::do_count_chars\" }",
      "DefId { id: 169, name: \"core::slice::<impl [T]>::chunks\" }",
      "DefId { id: 199, name: \"std::slice::Chunks::<'a, T>::new\" }",
      "DefId { id: 171, name: \"core::slice::<impl [T]>::as_chunks\" }",
      "DefId { id: 197, name: \"core::slice::<impl [T]>::as_chunks_unchecked\" }",
      "DefId { id: 198, name: \"core::slice::<impl [T]>::as_chunks_unchecked::precondition_check\" }",
      "DefId { id: 186, name: \"core::slice::<impl [T]>::as_ptr\" }",
      "DefId { id: 148, name: \"std::slice::from_raw_parts\" }",
      "DefId { id: 151, name: \"std::ptr::slice_from_raw_parts\" }",
      "DefId { id: 161, name: \"std::ptr::from_raw_parts\" }",
      "DefId { id: 149, name: \"std::mem::align_of\" }",
      "DefId { id: 150, name: \"std::slice::from_raw_parts::precondition_check\" }",
      "DefId { id: 152, name: \"core::ub_checks::maybe_is_aligned_and_not_null\" }",
      "DefId { id: 154, name: \"core::ub_checks::maybe_is_aligned_and_not_null::runtime\" }",
      "DefId { id: 155, name: \"std::ptr::const_ptr::<impl *const T>::is_aligned_to\" }",
      "DefId { id: 158, name: \"core::num::<impl usize>::is_power_of_two\" }",
      "DefId { id: 159, name: \"core::num::<impl usize>::count_ones\" }",
      "DefId { id: 105, name: \"std::ptr::const_ptr::<impl *const T>::addr\" }",
      "DefId { id: 115, name: \"std::ptr::const_ptr::<impl *const T>::cast\" }",
      "DefId { id: 156, name: \"std::ptr::const_ptr::<impl *const T>::is_null\" }",
      "DefId { id: 157, name: \"std::ptr::const_ptr::<impl *const T>::is_null::runtime\" }",
      "DefId { id: 153, name: \"core::ub_checks::is_valid_allocation_size\" }",
      "DefId { id: 110, name: \"std::mem::size_of\" }",
      "DefId { id: 115, name: \"std::ptr::const_ptr::<impl *const T>::cast\" }",
      "DefId { id: 185, name: \"core::slice::<impl [T]>::split_at_unchecked\" }",
      "DefId { id: 188, name: \"std::ptr::const_ptr::<impl *const T>::add\" }",
      "DefId { id: 148, name: \"std::slice::from_raw_parts\" }",
      "DefId { id: 149, name: \"std::mem::align_of\" }",
      "DefId { id: 110, name: \"std::mem::size_of\" }",
      "DefId { id: 151, name: \"std::ptr::slice_from_raw_parts\" }",
      "DefId { id: 161, name: \"std::ptr::from_raw_parts\" }",
      "DefId { id: 187, name: \"core::slice::<impl [T]>::split_at_unchecked::precondition_check\" }",
      "DefId { id: 167, name: \"core::slice::<impl [T]>::is_empty\" }",
      "DefId { id: 126, name: \"<std::slice::Iter<'a, T> as std::iter::Iterator>::next\" }",
      "DefId { id: 105, name: \"std::ptr::const_ptr::<impl *const T>::addr\" }",
      "DefId { id: 115, name: \"std::ptr::const_ptr::<impl *const T>::cast\" }",
      "DefId { id: 138, name: \"std::ptr::NonNull::<T>::add\" }",
      "DefId { id: 36, name: \"std::ptr::NonNull::<T>::as_ptr\" }",
      "DefId { id: 139, name: \"std::ptr::NonNull::<T>::as_ref\" }",
      "DefId { id: 142, name: \"std::ptr::mut_ptr::<impl *mut T>::cast_const\" }",
      "DefId { id: 137, name: \"<std::ptr::NonNull<T> as std::cmp::PartialEq>::eq\" }",
      "DefId { id: 134, name: \"core::num::<impl usize>::unchecked_sub\" }",
      "DefId { id: 140, name: \"core::num::<impl usize>::unchecked_sub::precondition_check\" }",
      "DefId { id: 141, name: \"core::num::<impl usize>::overflowing_sub\" }",
      "DefId { id: 135, name: \"std::ptr::without_provenance_mut\" }",
      "DefId { id: 173, name: \"std::array::<impl std::iter::IntoIterator for &'a [T; N]>::into_iter\" }",
      "DefId { id: 177, name: \"core::slice::<impl [T]>::iter\" }",
      "DefId { id: 178, name: \"std::slice::Iter::<'a, T>::new\" }",
      "DefId { id: 179, name: \"<std::ptr::NonNull<T> as std::convert::From<&T>>::from\" }",
      "DefId { id: 33, name: \"std::ptr::NonNull::<T>::from_ref\" }",
      "DefId { id: 180, name: \"std::ptr::without_provenance\" }",
      "DefId { id: 181, name: \"std::ptr::mut_ptr::<impl *mut T>::add\" }",
      "DefId { id: 34, name: \"std::ptr::NonNull::<T>::cast\" }",
      "DefId { id: 36, name: \"std::ptr::NonNull::<T>::as_ptr\" }",
      "DefId { id: 68, name: \"<I as std::iter::IntoIterator>::into_iter\" }",
      "DefId { id: 175, name: \"core::str::count::contains_non_continuation_byte\" }",
      "DefId { id: 168, name: \"std::intrinsics::unlikely\" }",
      "DefId { id: 196, name: \"std::intrinsics::cold_path\" }",
      "DefId { id: 172, name: \"core::slice::iter::<impl std::iter::IntoIterator for &'a [T]>::into_iter\" }",
      "DefId { id: 177, name: \"core::slice::<impl [T]>::iter\" }",
      "DefId { id: 178, name: \"std::slice::Iter::<'a, T>::new\" }",
      "DefId { id: 180, name: \"std::ptr::without_provenance\" }",
      "DefId { id: 135, name: \"std::ptr::without_provenance_mut\" }",
      "DefId { id: 36, name: \"std::ptr::NonNull::<T>::as_ptr\" }",
      "DefId { id: 34, name: \"std::ptr::NonNull::<T>::cast\" }",
      "DefId { id: 36, name: \"std::ptr::NonNull::<T>::as_ptr\" }",
      "DefId { id: 181, name: \"std::ptr::mut_ptr::<impl *mut T>::add\" }",
      "DefId { id: 179, name: \"<std::ptr::NonNull<T> as std::convert::From<&T>>::from\" }",
      "DefId { id: 33, name: \"std::ptr::NonNull::<T>::from_ref\" }",
      "DefId { id: 174, name: \"core::str::count::sum_bytes_in_usize\" }",
      "DefId { id: 195, name: \"core::num::<impl usize>::wrapping_mul\" }",
      "DefId { id: 166, name: \"core::slice::<impl [T]>::align_to\" }",
      "DefId { id: 186, name: \"core::slice::<impl [T]>::as_ptr\" }",
      "DefId { id: 191, name: \"core::slice::<impl [T]>::align_to_offsets\" }",
      "DefId { id: 183, name: \"core::slice::<impl [T]>::split_at\" }",
      "DefId { id: 184, name: \"core::slice::<impl [T]>::split_at_checked\" }",
      "DefId { id: 185, name: \"core::slice::<impl [T]>::split_at_unchecked\" }",
      "DefId { id: 148, name: \"std::slice::from_raw_parts\" }",
      "DefId { id: 149, name: \"std::mem::align_of\" }",
      "DefId { id: 190, name: \"std::ptr::align_offset\" }",
      "DefId { id: 194, name: \"std::ptr::align_offset::mod_inv\" }",
      "DefId { id: 170, name: \"<std::slice::Chunks<'a, T> as std::iter::Iterator>::next\" }",
      "DefId { id: 182, name: \"std::cmp::min\" }",
      "DefId { id: 189, name: \"std::cmp::Ord::min\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 94, name: \"std::cmp::impls::<impl std::cmp::PartialOrd for usize>::lt\" }",
      "DefId { id: 183, name: \"core::slice::<impl [T]>::split_at\" }",
      "DefId { id: 184, name: \"core::slice::<impl [T]>::split_at_checked\" }",
      "DefId { id: 172, name: \"core::slice::iter::<impl std::iter::IntoIterator for &'a [T]>::into_iter\" }",
      "DefId { id: 126, name: \"<std::slice::Iter<'a, T> as std::iter::Iterator>::next\" }",
      "DefId { id: 138, name: \"std::ptr::NonNull::<T>::add\" }",
      "DefId { id: 105, name: \"std::ptr::const_ptr::<impl *const T>::addr\" }",
      "DefId { id: 115, name: \"std::ptr::const_ptr::<impl *const T>::cast\" }",
      "DefId { id: 137, name: \"<std::ptr::NonNull<T> as std::cmp::PartialEq>::eq\" }",
      "DefId { id: 139, name: \"std::ptr::NonNull::<T>::as_ref\" }",
      "DefId { id: 142, name: \"std::ptr::mut_ptr::<impl *mut T>::cast_const\" }",
      "DefId { id: 162, name: \"core::str::<impl str>::len\" }",
      "DefId { id: 143, name: \"std::str::Chars::<'a>::as_str\" }",
      "DefId { id: 145, name: \"std::slice::Iter::<'a, T>::as_slice\" }",
      "DefId { id: 147, name: \"std::slice::Iter::<'a, T>::make_slice\" }",
      "DefId { id: 146, name: \"std::str::from_utf8_unchecked\" }",
      "DefId { id: 48, name: \"std::iter::Iterator::advance_by\" }",
      "DefId { id: 68, name: \"<I as std::iter::IntoIterator>::into_iter\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 90, name: \"<std::str::CharIndices<'a> as std::iter::Iterator>::next\" }",
      "DefId { id: 104, name: \"<std::str::Chars<'a> as std::iter::Iterator>::next\" }",
      "DefId { id: 116, name: \"core::str::validations::next_code_point\" }",
      "DefId { id: 126, name: \"<std::slice::Iter<'a, T> as std::iter::Iterator>::next\" }",
      "DefId { id: 139, name: \"std::ptr::NonNull::<T>::as_ref\" }",
      "DefId { id: 142, name: \"std::ptr::mut_ptr::<impl *mut T>::cast_const\" }",
      "DefId { id: 128, name: \"<std::option::Option<T> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual\" }",
      "DefId { id: 131, name: \"core::str::validations::utf8_acc_cont_byte\" }",
      "DefId { id: 130, name: \"std::option::Option::<T>::unwrap_unchecked\" }",
      "DefId { id: 132, name: \"std::hint::unreachable_unchecked\" }",
      "DefId { id: 133, name: \"std::hint::unreachable_unchecked::precondition_check\" }",
      "DefId { id: 127, name: \"<std::option::Option<T> as std::ops::Try>::branch\" }",
      "DefId { id: 129, name: \"core::str::validations::utf8_first_byte\" }",
      "DefId { id: 117, name: \"std::option::Option::<T>::map\" }",
      "DefId { id: 119, name: \"<std::str::Chars<'a> as std::iter::Iterator>::next::{closure#0}\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 103, name: \"<std::slice::Iter<'_, T> as std::iter::ExactSizeIterator>::len\" }",
      "DefId { id: 92, name: \"std::num::NonZero::<T>::new_unchecked\" }",
      "DefId { id: 99, name: \"std::num::NonZero::<T>::new\" }",
      "DefId { id: 100, name: \"std::num::NonZero::<T>::new_unchecked::precondition_check\" }",
      "DefId { id: 70, name: \"std::iter::range::<impl std::iter::Iterator for std::ops::Range<A>>::next\" }",
      "DefId { id: 74, name: \"<std::ops::Range<T> as std::iter::range::RangeIteratorImpl>::spec_next\" }",
      "DefId { id: 95, name: \"<usize as std::iter::Step>::forward_unchecked\" }",
      "DefId { id: 91, name: \"std::option::Option::<T>::is_none\" }",
      "DefId { id: 93, name: \"std::option::Option::<T>::is_some\" }",
      "DefId { id: 62, name: \"core::fmt::PostPadding::write\" }",
      "DefId { id: 31, name: \"core::fmt::rt::Argument::<'_>::new\" }",
      "DefId { id: 33, name: \"std::ptr::NonNull::<T>::from_ref\" }",
      "DefId { id: 34, name: \"std::ptr::NonNull::<T>::cast\" }",
      "DefId { id: 36, name: \"std::ptr::NonNull::<T>::as_ptr\" }",
      "DefId { id: 19, name: \"std::fmt::Arguments::<'a>::new_v1\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 1, name: \"verify::contract1::kani_register_contract\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 2, name: \"verify::contract1::kani_contract_mode\" }",
      "DefId { id: 1, name: \"verify::contract1::kani_register_contract\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }",
      "DefId { id: 1, name: \"verify::contract1::kani_register_contract\" }",
      "DefId { id: 15, name: \"std::ptr::drop_in_place\" }"
    ]
  }
]