use indexmap::IndexSet;
use kani::{CallGraph, KANI_TOOL_ATTRS, collect_reachable_items};
use rustc_middle::ty::TyCtxt;
use rustc_smir::rustc_internal::internal;
use rustc_span::{Span, source_map::SourceMap};
use serde::{Serialize, Serializer};
use stable_mir::{
    CrateDef, DefId,
    mir::mono::{Instance, MonoItem},
    ty::{FnDef, RigidTy, Ty, TyKind},
};

mod kani;

pub fn analyze(tcx: TyCtxt, src_map: &SourceMap) -> Vec<Function> {
    let local_items = stable_mir::all_local_items();
    let cap = local_items.len();

    let mut entries = Vec::with_capacity(cap);

    for item in local_items {
        let _span = error_span!("all_local_items", ?item).entered();

        let Ok(inst) = Instance::try_from(item).inspect_err(|err| error!(?err)) else { continue };
        entries.push(MonoItem::from(inst));
    }

    let (mono_items, callgraph) = collect_reachable_items(tcx, &entries);

    mono_items.iter().filter_map(|item| Function::new(item, &callgraph, tcx, src_map)).collect()
}

/// A Rust funtion with its file source, attributes, and raw function content.
#[derive(Debug, Serialize)]
pub struct Function {
    /// DefId in stable_mir.
    #[serde(serialize_with = "ser_def_id")]
    def_id: DefId,
    /// Every funtion must be declared in a specific file, even for those
    /// generated by macros.
    file: String,
    /// Attributes are attached the function, but it seems that attributes
    /// and function must be separated to query.
    attrs: Vec<String>,
    /// Raw function string, including name, signature, and body.
    func: String,
    /// Recursive fnction calls inside the body.
    callees: Vec<String>,
}

impl Function {
    pub fn new(
        item: &MonoItem,
        callgraph: &CallGraph,
        tcx: TyCtxt,
        src_map: &SourceMap,
    ) -> Option<Self> {
        // skip non fn items
        let &MonoItem::Fn(inst) = item else {
            return None;
        };

        let fn_def = ty_to_fndef(inst.ty())?;
        let inst_def = inst.def;
        let span = inst_def.span();

        let file = span.get_filename();
        let body = fn_def.body()?;

        let mut callees = IndexSet::new();
        callgraph.recursive_callees(item, &mut callees);
        let callees = callees.into_iter().map(|x| format!("{:?}", x.def.def_id())).collect();

        let func = source_code_with(body.span, tcx, src_map);
        info!(" - {:?} ({span:?}): {func}", inst_def.name());

        // Only need kanitool attrs: proof, proof_for_contract, contract, ...
        let attrs = KANI_TOOL_ATTRS
            .iter()
            .flat_map(|v| inst_def.tool_attrs(v))
            .map(|attr| attr.as_str().to_owned())
            .collect();

        let def_id = fn_def.def_id();
        Some(Function { def_id, file, attrs, func, callees })
    }
}

/// Extract FnDef from Ty.
fn ty_to_fndef(ty: Ty) -> Option<FnDef> {
    let TyKind::RigidTy(RigidTy::FnDef(fn_def, _)) = ty.kind() else {
        return None;
    };
    Some(fn_def)
}

/// Source code for a span.
fn source_code(span: Span, src_map: &SourceMap) -> String {
    src_map
        .span_to_source(span, |text, x, y| {
            let src = &text[x..y];
            debug!("[{x}:{y}]\n{src}");
            Ok(src.to_owned())
        })
        .unwrap()
}

/// Source code for a stable_mir span.
fn source_code_with(
    stable_mir_span: stable_mir::ty::Span,
    tcx: TyCtxt,
    src_map: &SourceMap,
) -> String {
    let span = internal(tcx, stable_mir_span);
    source_code(span, src_map)
}

fn ser_def_id<S: Serializer>(def_id: &DefId, serializer: S) -> Result<S::Ok, S::Error> {
    let def_id_str = format!("{def_id:?}");
    serializer.serialize_str(&def_id_str)
}
