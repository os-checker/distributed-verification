use serde::Serialize;
use stable_mir::{CrateDef, DefId};

/// A Rust funtion with its file source, attributes, and raw function content.
#[derive(Debug, Serialize)]
pub struct SerFunction {
    /// DefId in stable_mir.
    pub def_id: String,
    /// Every funtion must be declared in a specific file, even for those
    /// generated by macros.
    pub file: String,
    /// Attributes are attached the function, but it seems that attributes
    /// and function must be separated to query.
    pub attrs: Vec<String>,
    /// Raw function string, including name, signature, and body.
    pub func: String,
    /// Recursive fnction calls inside the body.
    pub callees: Vec<String>,
}

impl SerFunction {
    pub fn new(fun: super::Function) -> Self {
        SerFunction {
            def_id: format_def_id(&fun.def_id),
            file: fun.file,
            attrs: fun.attrs.iter().map(|a| a.as_str().to_owned()).collect(),
            func: fun.func,
            callees: fun.callees.into_iter().map(|x| format_def_id(&x.def.def_id())).collect(),
        }
    }
}

fn format_def_id(def_id: &DefId) -> String {
    format!("{def_id:?}")
}
